# noinspection GraphQLMissingType

##################################################
#                   BUNDLE
##################################################

type Bundle @entity {
    "stores for USD calculations"
    id: ID!
    ethPrice: BigDecimal! # price of ETH usd
}

##################################################
#                   FACTORY
##################################################

type UniswapFactory @entity {
    "Store info about the whole DEX"
    # factory address
    id: ID!

    # pair info
    pairCount: Int!

    # total volume
    totalVolumeUSD: BigDecimal!
    totalVolumeETH: BigDecimal!

    # untracked values - less confident USD scores
    untrackedVolumeUSD: BigDecimal!

    # total liquidity
    totalLiquidityUSD: BigDecimal!
    totalLiquidityETH: BigDecimal!

    # transactions
    txCount: BigInt!
}

##################################################
#                   TOKEN
##################################################

type Token @entity {
    "Store info about token"
    # token address
    id: ID!

    # mirrored from the smart contract
    symbol: String!
    name: String!
    decimals: BigInt!

    # used for other stats like marketcap
    totalSupply: BigInt!

    # token specific volume
    tradeVolume: BigDecimal!
    tradeVolumeUSD: BigDecimal!
    untrackedVolumeUSD: BigDecimal!

    # for tracking volume
    whitelist: [String!]!

    # transactions across all pairs
    txCount: BigInt!

    # liquidity across all pairs
    totalLiquidity: BigDecimal!

    # derived prices
    derivedETH: BigDecimal!

    # allowed to used in a gauge
    isWhitelisted:Boolean!

    # derived fields
    tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
    pairDayDataBase: [PairDayData!]! @derivedFrom(field: "token0")
    pairDayDataQuote: [PairDayData!]! @derivedFrom(field: "token1")
    pairBase: [Pair!]! @derivedFrom(field: "token0")
    pairQuote: [Pair!]! @derivedFrom(field: "token1")
    bribes: [BribeToken!]! @derivedFrom(field: "token")
    gauges: [GaugeRewardToken!]! @derivedFrom(field: "token")
}

##################################################
#                   PAIR
##################################################

type Pair @entity {
    "Pair info"
    # pair address
    id: ID!
    factory: UniswapFactory!
    symbol:String!
    name:String!

    # mirrored from the smart contract
    token0: Token!
    token1: Token!
    isStable:Boolean!
    reserve0: BigDecimal!
    reserve1: BigDecimal!
    totalSupply: BigDecimal!

    # derived liquidity
    reserveETH: BigDecimal!
    reserveUSD: BigDecimal!
    trackedReserveETH: BigDecimal! # used for separating per pair reserves and global
    # Price in terms of the asset pair
    token0Price: BigDecimal!
    token1Price: BigDecimal!

    # lifetime volume stats
    volumeToken0: BigDecimal!
    volumeToken1: BigDecimal!
    volumeUSD: BigDecimal!
    untrackedVolumeUSD: BigDecimal!
    txCount: BigInt!

    # creation stats
    createdAtTimestamp: BigInt!
    createdAtBlockNumber: BigInt!

    # Fields used to help derived relationship
    liquidityProviderCount: BigInt! # used to detect new exchanges
    # derived fields
    pairHourData: [PairHourData!]! @derivedFrom(field: "pair")
    liquidityPositions: [LiquidityPosition!]! @derivedFrom(field: "pair")
    liquidityPositionSnapshots: [LiquidityPositionSnapshot!]! @derivedFrom(field: "pair")
    mints: [Mint!]! @derivedFrom(field: "pair")
    burns: [Burn!]! @derivedFrom(field: "pair")
    swaps: [Swap!]! @derivedFrom(field: "pair")

    gauge: GaugeEntity
    gaugebribes: BribeEntity
    fee: Int!
}

type PairMap @entity(immutable: true) {
    "Entity ID contains token0+token1 addresses for cheap fin pair address"
    id: ID!
    pair: Pair!
}

type LiquidityPosition @entity {
    id: ID!
    user: User!
    pair: Pair!
    liquidityTokenBalance: BigDecimal!
}

type LiquidityPositionSnapshot @entity(immutable: true) {
    "Saved over time for return calculations, gets created and never updated"
    id: ID!
    liquidityPosition: LiquidityPosition!
    timestamp: Int! # saved for fast historical lookups
    block: Int! # saved for fast historical lookups
    user: User! # reference to user
    pair: Pair! # reference to pair
    token0PriceUSD: BigDecimal! # snapshot of token0 price
    token1PriceUSD: BigDecimal! # snapshot of token1 price
    reserve0: BigDecimal! # snapshot of pair token0 reserves
    reserve1: BigDecimal! # snapshot of pair token1 reserves
    reserveUSD: BigDecimal! # snapshot of pair reserves in USD
    liquidityTokenTotalSupply: BigDecimal! # snapshot of pool token supply
    liquidityTokenBalance: BigDecimal! # snapshot of users pool token balance
}

##################################################
#                   TRANSACTIONS/MINT/BURN/SWAP
##################################################

type Transaction @entity {
    id: ID! # txn hash
    blockNumber: BigInt!
    timestamp: BigInt!
    # This is not the reverse of Mint.transaction; it is only used to
    # track incomplete mints (similar for burns and swaps)
    mints: [Mint!]!
    burns: [Burn!]!
    swaps: [Swap!]!
}

type Mint @entity {
    # transaction hash + "-" + index in mints Transaction array
    id: ID!
    transaction: Transaction!
    timestamp: BigInt! # need this to pull recent txns for specific token or pair
    pair: Pair!

    # populated from the primary Transfer event
    to: Bytes!
    liquidity: BigDecimal!

    # populated from the Mint event
    sender: Bytes
    amount0: BigDecimal
    amount1: BigDecimal
    logIndex: BigInt
    # derived amount based on available prices of tokens
    amountUSD: BigDecimal

    # optional fee fields, if a Transfer event is fired in _mintFee
    feeTo: Bytes
    feeLiquidity: BigDecimal
}

type Burn @entity {
    # transaction hash + "-" + index in mints Transaction array
    id: ID!
    transaction: Transaction!
    timestamp: BigInt! # need this to pull recent txns for specific token or pair
    pair: Pair!

    # populated from the primary Transfer event
    liquidity: BigDecimal!

    # populated from the Burn event
    sender: Bytes
    amount0: BigDecimal
    amount1: BigDecimal
    to: Bytes
    logIndex: BigInt
    # derived amount based on available prices of tokens
    amountUSD: BigDecimal

    # mark uncomplete in ETH case
    needsComplete: Boolean!

    # optional fee fields, if a Transfer event is fired in _mintFee
    feeTo: Bytes
    feeLiquidity: BigDecimal
}

type Swap @entity {
    # transaction hash + "-" + index in swaps Transaction array
    id: ID!
    transaction: Transaction!
    timestamp: BigInt! # need this to pull recent txns for specific token or pair
    pair: Pair!

    # populated from the Swap event
    sender: Bytes!
    from: Bytes! # the EOA that initiated the txn
    amount0In: BigDecimal!
    amount1In: BigDecimal!
    amount0Out: BigDecimal!
    amount1Out: BigDecimal!
    to: Bytes!
    logIndex: BigInt

    # derived info
    amountUSD: BigDecimal!
}

##################################################
#                   USER INFO
##################################################

type User @entity {
    id: ID!

    usdSwapped: BigDecimal!

    liquidityPositions: [LiquidityPosition!] @derivedFrom(field: "user")
    gaugePositions: [GaugeUserPosition!] @derivedFrom(field: "user")
    nfts: [VeNFTEntity!] @derivedFrom(field: "user")
}

##################################################
#                   CUMULATIVE DATA
##################################################

type UniswapDayData @entity {
    "Data accumulated and condensed into day stats for all of Uniswap"
    id: ID! # timestamp rounded to current day by dividing by 86400
    date: Int!

    dailyVolumeETH: BigDecimal!
    dailyVolumeUSD: BigDecimal!
    dailyVolumeUntracked: BigDecimal!

    totalVolumeETH: BigDecimal!
    totalLiquidityETH: BigDecimal!
    totalVolumeUSD: BigDecimal! # Accumulate at each trade, not just calculated off whatever totalVolume is. making it more accurate as it is a live conversion
    totalLiquidityUSD: BigDecimal!

    txCount: BigInt!
}

type PairHourData @entity {
    id: ID!
    hourStartUnix: Int! # unix timestamp for start of hour
    pair: Pair!

    # reserves
    reserve0: BigDecimal!
    reserve1: BigDecimal!

    # derived liquidity
    reserveUSD: BigDecimal!

    # volume stats
    hourlyVolumeToken0: BigDecimal!
    hourlyVolumeToken1: BigDecimal!
    hourlyVolumeUSD: BigDecimal!
    hourlyTxns: BigInt!
}

# Data accumulated and condensed into day stats for each exchange
type PairDayData @entity {
    id: ID!
    date: Int!
    pairAddress: Bytes!
    pair: Pair!
    token0: Token!
    token1: Token!

    # reserves
    reserve0: BigDecimal!
    reserve1: BigDecimal!

    # total supply for LP historical returns
    totalSupply: BigDecimal!

    # derived liquidity
    reserveUSD: BigDecimal!

    # volume stats
    dailyVolumeToken0: BigDecimal!
    dailyVolumeToken1: BigDecimal!
    dailyVolumeUSD: BigDecimal!
    dailyTxns: BigInt!
}

type TokenDayData @entity {
    id: ID!
    date: Int!
    token: Token!

    # volume stats
    dailyVolumeToken: BigDecimal!
    dailyVolumeETH: BigDecimal!
    dailyVolumeUSD: BigDecimal!
    dailyTxns: BigInt!

    # liquidity stats
    totalLiquidityToken: BigDecimal!
    totalLiquidityETH: BigDecimal!
    totalLiquidityUSD: BigDecimal!

    # price stats
    priceUSD: BigDecimal!
}

##################################################
#                   GAUGE
##################################################

type GaugeEntity @entity {
    id: ID!

    pair: Pair!
    totalSupply :BigDecimal!
    totalSupplyETH :BigDecimal!
    bribe:BribeEntity
    totalDerivedSupply :BigDecimal!

    voteWeight: BigDecimal!
    expectedAmount: BigDecimal!
    expectAPR: BigDecimal!
    expectAPRDerived: BigDecimal!
    totalWeight: BigDecimal!

    rewardTokensAddresses: [String!]!

    rewardTokens: [GaugeRewardToken!]! @derivedFrom(field: "gauge")
    votes: [Vote!]! @derivedFrom(field: "gauge")
    positions: [GaugeUserPosition!] @derivedFrom(field: "gauge")
}

type GaugeRewardToken @entity {
    id: ID!

    gauge: GaugeEntity!
    token: Token!


    totalSupply:BigDecimal!
    totalSupplyETH:BigDecimal!
    left:BigDecimal!
    leftETH:BigDecimal!
    apr:BigDecimal!
    finishPeriod:BigDecimal!
    derivedAPR:BigDecimal!
}

type GaugeAttachment @entity {
    id: ID!

    gauge: GaugeEntity!
    user: User!

    deposit: BigDecimal!

    veNFT: VeNFTEntity
}

type GaugeUserPosition @entity {
    id: ID!

    gauge: GaugeEntity!
    user: User!

    balance: BigDecimal!
    derivedBalance: BigDecimal!
}

##################################################
#                   BRIBE
##################################################

type BribeEntity @entity{
    id: ID!
    pair: Pair!
    ve: VeEntity!
    veUnderlying: String!
    bribeTokensAdr: [String!]!
    bribeTokens: [BribeToken!]! @derivedFrom(field: "bribe")
    users: [BribeUser!]! @derivedFrom(field: "bribe")
}

type BribeToken @entity {
    id: ID!

    bribe: BribeEntity!
    token: Token!

    totalSupply:BigDecimal!
    totalSupplyETH:BigDecimal!
    left:BigDecimal!
    leftETH:BigDecimal!
    apr:BigDecimal!
}

type BribeUser @entity {
    id: ID!

    bribe: BribeEntity!
    veNFT: VeNFTEntity!
}

##################################################
#                   VE
##################################################

type VeEntity @entity {
    id: ID!

    totalNFTs: Int!
    totalLocked: BigDecimal!
    underlying: Token!
    underlyingMinter: String!

    users: [VeNFTEntity!]! @derivedFrom(field: "ve")
}

type VeNFTEntity @entity {
    id: ID!

    ve: VeEntity!
    user: User!

    lockedAmount: BigDecimal!
    lockedEnd: Int!
    attachments: Int!
    voteIds: [String!]!

    gauges: [GaugeAttachment!]! @derivedFrom(field: "veNFT")
    bribes: [BribeUser!]!  @derivedFrom(field: "veNFT")
    votes: [Vote!]! @derivedFrom(field: "veNFT")
}

##################################################
#                   VOTER
##################################################

type VoterEntity @entity {
    id: ID!

    votes: [Vote!]! @derivedFrom(field: "voter")
}

type Vote @entity {
    id: ID!

    voter: VoterEntity!
    veNFT: VeNFTEntity!
    gauge: GaugeEntity!
    pool: Pair!

    weight: BigDecimal!
    weightPercent: BigDecimal!
}

##################################################
#                   VE DISTRIBUTOR
##################################################

type VeDistEntity @entity {
    id: ID!

    ve: VeEntity!
    rewardToken: Token!
    minter: String!

    apr: BigDecimal!
}
